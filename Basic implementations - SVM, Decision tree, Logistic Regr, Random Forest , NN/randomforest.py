# -*- coding: utf-8 -*-
"""RandomForest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19jT9gyEipYmCXubyYJSQinEuH9LmshE1
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,confusion_matrix

from tensorflow.keras.datasets import mnist

(x_train,y_train),(x_test,y_test) = mnist.load_data()

index = 3
print("Label: " + str(y_train[index]))
plt.imshow(x_train[index],cmap='gray')

x_train = x_train.reshape((60000,784))

clf = RandomForestClassifier(verbose=10,
                             n_estimators=50
                            #  criterion='entropy',
                            #  max_features='sqrt',
                            #  max_depth=13
                            )
clf.fit(x_train,y_train)

prediction_test = clf.predict(x_test.reshape((10000,784)))

accuracy_score(y_test,prediction_test)

importances = clf.feature_importances_
std = np.std([tree.feature_importances_ for tree in clf.estimators_],axis=0)
indices = np.argsort(importances)[::-1]

plt.figure()
plt.title("Feature importances")
plt.bar(range(x_train.shape[1]-734), importances[indices[:50]],
        color="r",
        # yerr=std[indices][:50],
        align="center")
plt.xticks(range(x_train.shape[1]-734), indices)
plt.xlim([-1, x_train.shape[1]-734])
plt.show()

