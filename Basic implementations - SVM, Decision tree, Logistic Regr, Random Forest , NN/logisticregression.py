# -*- coding: utf-8 -*-
"""LogisticRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11RDQtJLdDqQSyNu7CaK1R1kXN68RaJod
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

from tensorflow.keras.datasets import mnist
(X_train,y_train),(X_test,y_test) = mnist.load_data()

X_train = X_train/255
X_test = X_test/255
X_train = X_train.reshape((60000,784))
X_test = X_test.reshape((10000,784))

clf = LogisticRegression(verbose=3,max_iter=1000)

clf.fit(X_train,y_train)

pred = clf.predict(X_test)

acc = accuracy_score(pred,y_test)
acc

clf.score(X_test,y_test)

confusion_matrix(y_test,pred)

sns.heatmap(confusion_matrix(y_test,pred),cmap='Blues_r',fmt='',annot=True,cbar=False)
plt.ylabel("Correct Label")
plt.xlabel("Predicted Label")
plt.title("Confusion Matrix for Logistic Regression\nModel Accuracy={}%".format(acc*100))

sns.heatmap(confusion_matrix(y_test,pred),cmap='Blues_r',fmt='',annot=True,cbar=False)
plt.ylabel("Correct Label")
plt.xlabel("Predicted Label")
plt.title("Confusion Matrix for Logistic Regression\nModel Accuracy={}%".format(acc*100))

print("Classification Report for Logistic Regression:\n{}".format(classification_report(y_test,pred)))

param_grid = [{
    'tol' : [0.001,0.0001],
    'penalty':['l2','none']
}]
g = GridSearchCV(clf,param_grid=param_grid,verbose = 2,cv = 3,return_train_score=True)

g.fit(X_train,y_train)

g.best_params_

g.best_estimator_

g.best_score_

